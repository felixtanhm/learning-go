// Activity 1
1. Insertion Sort: 
Initial: 20 80 40 25 60 40
20 80 40 25 60 40 // 80 is compared with 20. Since 80 > 20, it stays in place.
20 40 80 25 60 40 // Insert 40. It is compared with 80 and swapped.
20 25 40 80 60 40 // Insert 25. It is compared with 80, 40, and 20, then placed between 20 and 40.
20 25 40 60 80 40 // Insert 60. It is compared with 80 and swapped.
20 25 40 40 60 80 // Insert the last 40. It is compared with 80 and 60, then placed between 25 and 60.

2. Selection Sort: 
Initial: 7 12 24 4 19 32
4 12 24 7 19 32 // Find the smallest element from index 0 to end, which is 4, and swap with element at index 0.
4 7 24 12 19 32 // Find the smallest element from index 1 to end, which is 7, and swap with element at index 1.
4 7 12 24 19 32 // Find the smallest element from index 2 to end, which is 12, and swap with element at index 2.
4 7 12 19 24 32 // Find the smallest element from index 3 to end, which is 19, and swap with element at index 3.
4 7 12 19 24 32 // Find the smallest element from index 4 to end, which is 24 (no change needed).

3a. 
Initial: 8 6 4 2
Insertion Sort: 
6 8 4 2 // 8 is compared with 6. Since 8 > 6, it is swapped.
4 6 8 2 // Insert 4. It is compared with 8 and 6 and placed before 6.
6 4 2 8 // Insert 2. It is compared with 8, 6 and 4 and placed before 4.


Selection Sort: 
2 6 4 8 // Find the smallest element from index 0 to end, which is 2, and swap with element at index 0.
2 4 6 8 // Find the smallest element from index 1 to end, which is 4, and swap with element at index 1.
2 4 6 8 // Find the smallest element from index 2 to end, which is 6 (no change needed).
2 4 6 8 // Find the smallest element from index 3 to end, which is 8 (no change needed).

3b. 
Initial: 2 4 6 8 
Insertion Sort: 
2 4 6 8 // 2 is compared with 4. Since 2 < 4, it stays in place.
2 4 6 8 // Insert 6. It is compared with 2 and 4 and since 6 > 4, it stays in place.
2 4 6 8 // Insert 8. It is compared with 2, 4, and 6 and since 8 > 6, it stays in place.

Selection Sort: 
2 4 6 8 // Find the smallest element from index 0 to end, which is 2 (no change needed).
2 4 6 8 // Find the smallest element from index 1 to end, which is 4 (no change needed).
2 4 6 8 // Find the smallest element from index 2 to end, which is 6 (no change needed).
2 4 6 8 // Find the smallest element from index 3 to end, which is 8 (no change needed).

What can you conclude about the differences in performance between insertion sort and selection
sort based on the order of the items?
Sorted Array: 
Insertion Sort is faster because it takes advantage of the existing order, achieving O(n). 
Selection Sort doesnâ€™t benefit from initial order and remains O(n2).

Inverted Array: 
Both algorithms perform similarly, but Selection Sort may be slightly faster because it makes fewer data moves. 
Insertion Sort performs more shifts in this case, making it slower on fully inverted arrays.